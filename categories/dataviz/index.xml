<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dataviz on SHELTRON</title>
    <link>https://nshelton.github.io/categories/dataviz/</link>
    <description>Recent content in dataviz on SHELTRON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nshelton.github.io/categories/dataviz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rap Word Cloud</title>
      <link>https://nshelton.github.io/home/wordcloud/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nshelton.github.io/home/wordcloud/</guid>
      <description>An Optimisaiton Journey. Client : Rap Research Lab
Rendering 5000 TextMeshPro meshes in 1ms for an interactive VR word cloudI started with a naive 5000 TextMeshPro gameobjects, which could take 30ms CPU and GPU, and made a new system that took 1ms CPU and GPU and still looked dope.
FunctionalityInteractive 3D visualization of words used in a corpus of rap lyrics (See Part 1)
Interface Features Left Thumb button transitions from Globe View to Word Cloud view Right hand controller has a “laser” which intersects with words to select them Clicking word with laser transports user to the word Words can also be selected with Right Hand controller Interaction point Selecting word with Right hand shows usage over time of the word and 10 similar words Timeline View Pressing both grips allows user to scale and rotate the word cloud.</description>
    </item>
    
    <item>
      <title>LiDAR Processing</title>
      <link>https://nshelton.github.io/home/lidar_processing/</link>
      <pubDate>Fri, 11 Mar 2016 20:32:03 -0800</pubDate>
      
      <guid>https://nshelton.github.io/home/lidar_processing/</guid>
      <description>&lt;p&gt;surface reconstruction from point clouds&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LiDAR Processing pt.2</title>
      <link>https://nshelton.github.io/home/lidar_processing2/</link>
      <pubDate>Fri, 11 Mar 2016 20:32:03 -0800</pubDate>
      
      <guid>https://nshelton.github.io/home/lidar_processing2/</guid>
      <description>&lt;p&gt;more experiments in point cloud reconstruction&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>this._node</title>
      <link>https://nshelton.github.io/home/this._node/</link>
      <pubDate>Fri, 20 Nov 2015 20:32:03 -0800</pubDate>
      
      <guid>https://nshelton.github.io/home/this._node/</guid>
      <description>&lt;p&gt;Interactive Facebook Graph Visualization&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Atlanta </title>
      <link>https://nshelton.github.io/home/atlanta/</link>
      <pubDate>Sat, 18 Jul 2015 00:13:37 -0706</pubDate>
      
      <guid>https://nshelton.github.io/home/atlanta/</guid>
      <description>&lt;p&gt;geospatial vertex shader&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tweet</title>
      <link>https://nshelton.github.io/home/tweet/</link>
      <pubDate>Sat, 18 Jul 2015 00:13:37 -0706</pubDate>
      
      <guid>https://nshelton.github.io/home/tweet/</guid>
      <description>&lt;p&gt;visual tweet and population density visualization&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenSWR</title>
      <link>https://nshelton.github.io/home/openswr/</link>
      <pubDate>Sat, 01 Feb 2014 20:32:03 -0800</pubDate>
      
      <guid>https://nshelton.github.io/home/openswr/</guid>
      <description>Low-level OpenGL driver development
video: isosurface extraction and realtime rendering of a shit ton of triangles on a xeon phi cluster (no GPUs!)
In 2015 I contracted for Intel&amp;rsquo;s visualization department on an OpenGL driver optimised for many-core intel supercomputer clusters. With that many CPUs, you can treat the network as a GPU, with each core doing some work in a Tile-Based Deferred Rendering (TBDR) pipeline. This was built on the Mesa3D graphics library and greatly improved frame rates on certain systems compared to the built in software renderer in Mesa3D (llvmpipe).</description>
    </item>
    
  </channel>
</rss>
